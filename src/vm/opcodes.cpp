#include "opcodes.h"
#include "lua_vm.h"
#include "instruction.h"
#include <iostream>
using namespace std;

const Instr opcodes[NUM_OPCODES] = {
//   T, A, B,      C,      mode,  name
    {0, 1, OpArgR, OpArgN, IABC,  "MOVE",       &luaVm::move   },
    {0, 1, OpArgK, OpArgN, IABx,  "LOADK",      &luaVm::loadK  },
    {0, 1, OpArgN, OpArgN, IABx,  "LOADKX",     &luaVm::loadKx  },
    {0, 1, OpArgU, OpArgU, IABC,  "LOADBOOL",   &luaVm::loadBool  },
    {0, 1, OpArgU, OpArgN, IABC,  "LOADNIL",    &luaVm::loadNil  },
    {0, 1, OpArgU, OpArgN, IABC,  "GETUPVAL",   &luaVm::getUpvalue  },
    {0, 1, OpArgU, OpArgK, IABC,  "GETTABUP",   &luaVm::getTabUp  },
    {0, 1, OpArgR, OpArgK, IABC,  "GETTABLE",   &luaVm::getTable  },
    {0, 1, OpArgK, OpArgK, IABC,  "SETTABUP",   &luaVm::setTabUp  },
    {0, 0, OpArgU, OpArgN, IABC,  "SETUPVAL",   &luaVm::setUpvalue  },
    {0, 0, OpArgK, OpArgK, IABC,  "SETTABLE",   &luaVm::setTable  },
    {0, 1, OpArgU, OpArgU, IABC,  "NEWTABLE",   &luaVm::newTable  },
    {0, 1, OpArgR, OpArgK, IABC,  "SELF",       &luaVm::self  },
    {0, 1, OpArgK, OpArgK, IABC,  "ADD",        &luaVm::add  },
    {0, 1, OpArgK, OpArgK, IABC,  "SUB",        &luaVm::sub  },
    {0, 1, OpArgK, OpArgK, IABC,  "MUL",        &luaVm::mul  },
    {0, 1, OpArgK, OpArgK, IABC,  "MOD",        &luaVm::mod  },
    {0, 1, OpArgK, OpArgK, IABC,  "POW",        &luaVm::pow  },
    {0, 1, OpArgK, OpArgK, IABC,  "DIV",        &luaVm::div  },
    {0, 1, OpArgK, OpArgK, IABC,  "IDIV",       &luaVm::idiv  },
    {0, 1, OpArgK, OpArgK, IABC,  "BAND",       &luaVm::band  },
    {0, 1, OpArgK, OpArgK, IABC,  "BOR",        &luaVm::bor  },
    {0, 1, OpArgK, OpArgK, IABC,  "BXOR",       &luaVm::bxor  },
    {0, 1, OpArgK, OpArgK, IABC,  "SHL",        &luaVm::shl  },
    {0, 1, OpArgK, OpArgK, IABC,  "SHR",        &luaVm::shr  },
    {0, 1, OpArgR, OpArgN, IABC,  "UNM",        &luaVm::unm  },
    {0, 1, OpArgR, OpArgN, IABC,  "BNOT",       &luaVm::bnot  },
    {0, 1, OpArgR, OpArgN, IABC,  "NOT",        &luaVm::vm_not  },
    {0, 1, OpArgR, OpArgN, IABC,  "LEN",        &luaVm::_len  },
    {0, 1, OpArgR, OpArgR, IABC,  "CONCAT",     &luaVm::concat  },
    {0, 0, OpArgR, OpArgN, IAsBx, "JMP",        &luaVm::jmp  },
    {1, 0, OpArgK, OpArgK, IABC,  "EQ",         &luaVm::eq  },
    {1, 0, OpArgK, OpArgK, IABC,  "LT",         &luaVm::lt  },
    {1, 0, OpArgK, OpArgK, IABC,  "LE",         &luaVm::le  },
    {1, 0, OpArgN, OpArgU, IABC,  "TEST",       &luaVm::test  },
    {1, 1, OpArgR, OpArgU, IABC,  "TESTSET",    &luaVm::testSet  },
    {0, 1, OpArgU, OpArgU, IABC,  "CALL",       &luaVm::call  },
    {0, 1, OpArgU, OpArgU, IABC,  "TAILCALL",   &luaVm::tailcall  },
    {0, 0, OpArgU, OpArgN, IABC,  "RETURN",     &luaVm::vm_return  },
    {0, 1, OpArgR, OpArgN, IAsBx, "FORLOOP",    &luaVm::forLoop  },
    {0, 1, OpArgR, OpArgN, IAsBx, "FORPREP",    &luaVm::forPrep  },
    {0, 0, OpArgN, OpArgU, IABC,  "TFORCALL",   &luaVm::tForCall  },
    {0, 1, OpArgR, OpArgN, IAsBx, "TFORLOOP",   &luaVm::tForLoop  },
    {0, 0, OpArgU, OpArgU, IABC,  "SETLIST",    &luaVm::setList  },
    {0, 1, OpArgU, OpArgN, IABx,  "CLOSURE",    &luaVm::closure  },
    {0, 1, OpArgU, OpArgN, IABC,  "VARARG",     &luaVm::vararg  },
    {0, 0, OpArgU, OpArgU, IAx,  "EXTRAARG",    &luaVm::loadK  },
};